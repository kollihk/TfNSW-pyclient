# coding: utf-8

"""
    Trip Planner

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DepartureMonitorResponseStopEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location': 'StopFinderLocation',
        'departure_time_planned': 'str',
        'transportation': 'TripTransportation'
    }

    attribute_map = {
        'location': 'location',
        'departure_time_planned': 'departureTimePlanned',
        'transportation': 'transportation'
    }

    def __init__(self, location=None, departure_time_planned=None, transportation=None, _configuration=None):  # noqa: E501
        """DepartureMonitorResponseStopEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._location = None
        self._departure_time_planned = None
        self._transportation = None
        self.discriminator = None

        if location is not None:
            self.location = location
        if departure_time_planned is not None:
            self.departure_time_planned = departure_time_planned
        if transportation is not None:
            self.transportation = transportation

    @property
    def location(self):
        """Gets the location of this DepartureMonitorResponseStopEvent.  # noqa: E501

        This element contains a single location associated with this stop time.   # noqa: E501

        :return: The location of this DepartureMonitorResponseStopEvent.  # noqa: E501
        :rtype: StopFinderLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DepartureMonitorResponseStopEvent.

        This element contains a single location associated with this stop time.   # noqa: E501

        :param location: The location of this DepartureMonitorResponseStopEvent.  # noqa: E501
        :type: StopFinderLocation
        """

        self._location = location

    @property
    def departure_time_planned(self):
        """Gets the departure_time_planned of this DepartureMonitorResponseStopEvent.  # noqa: E501

        A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format  # noqa: E501

        :return: The departure_time_planned of this DepartureMonitorResponseStopEvent.  # noqa: E501
        :rtype: str
        """
        return self._departure_time_planned

    @departure_time_planned.setter
    def departure_time_planned(self, departure_time_planned):
        """Sets the departure_time_planned of this DepartureMonitorResponseStopEvent.

        A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format  # noqa: E501

        :param departure_time_planned: The departure_time_planned of this DepartureMonitorResponseStopEvent.  # noqa: E501
        :type: str
        """

        self._departure_time_planned = departure_time_planned

    @property
    def transportation(self):
        """Gets the transportation of this DepartureMonitorResponseStopEvent.  # noqa: E501

        This element describes the mode of transportation and/or the specific route or trip used for this stop time.   # noqa: E501

        :return: The transportation of this DepartureMonitorResponseStopEvent.  # noqa: E501
        :rtype: TripTransportation
        """
        return self._transportation

    @transportation.setter
    def transportation(self, transportation):
        """Sets the transportation of this DepartureMonitorResponseStopEvent.

        This element describes the mode of transportation and/or the specific route or trip used for this stop time.   # noqa: E501

        :param transportation: The transportation of this DepartureMonitorResponseStopEvent.  # noqa: E501
        :type: TripTransportation
        """

        self._transportation = transportation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DepartureMonitorResponseStopEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DepartureMonitorResponseStopEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DepartureMonitorResponseStopEvent):
            return True

        return self.to_dict() != other.to_dict()
