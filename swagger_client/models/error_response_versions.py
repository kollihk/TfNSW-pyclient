# coding: utf-8

"""
    Trip Planner

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ErrorResponseVersions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'controller': 'str',
        'interface_max': 'str',
        'interface_min': 'str'
    }

    attribute_map = {
        'controller': 'controller',
        'interface_max': 'interfaceMax',
        'interface_min': 'interfaceMin'
    }

    def __init__(self, controller=None, interface_max=None, interface_min=None, _configuration=None):  # noqa: E501
        """ErrorResponseVersions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._controller = None
        self._interface_max = None
        self._interface_min = None
        self.discriminator = None

        if controller is not None:
            self.controller = controller
        if interface_max is not None:
            self.interface_max = interface_max
        if interface_min is not None:
            self.interface_min = interface_min

    @property
    def controller(self):
        """Gets the controller of this ErrorResponseVersions.  # noqa: E501

        The version of the API handling the request  # noqa: E501

        :return: The controller of this ErrorResponseVersions.  # noqa: E501
        :rtype: str
        """
        return self._controller

    @controller.setter
    def controller(self, controller):
        """Sets the controller of this ErrorResponseVersions.

        The version of the API handling the request  # noqa: E501

        :param controller: The controller of this ErrorResponseVersions.  # noqa: E501
        :type: str
        """

        self._controller = controller

    @property
    def interface_max(self):
        """Gets the interface_max of this ErrorResponseVersions.  # noqa: E501

        The maximum version number that can be requested in the `version` request parameter.  # noqa: E501

        :return: The interface_max of this ErrorResponseVersions.  # noqa: E501
        :rtype: str
        """
        return self._interface_max

    @interface_max.setter
    def interface_max(self, interface_max):
        """Sets the interface_max of this ErrorResponseVersions.

        The maximum version number that can be requested in the `version` request parameter.  # noqa: E501

        :param interface_max: The interface_max of this ErrorResponseVersions.  # noqa: E501
        :type: str
        """

        self._interface_max = interface_max

    @property
    def interface_min(self):
        """Gets the interface_min of this ErrorResponseVersions.  # noqa: E501

        The minimum version number that can be requested in the `version` request parameter.  # noqa: E501

        :return: The interface_min of this ErrorResponseVersions.  # noqa: E501
        :rtype: str
        """
        return self._interface_min

    @interface_min.setter
    def interface_min(self, interface_min):
        """Sets the interface_min of this ErrorResponseVersions.

        The minimum version number that can be requested in the `version` request parameter.  # noqa: E501

        :param interface_min: The interface_min of this ErrorResponseVersions.  # noqa: E501
        :type: str
        """

        self._interface_min = interface_min

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorResponseVersions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorResponseVersions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ErrorResponseVersions):
            return True

        return self.to_dict() != other.to_dict()
