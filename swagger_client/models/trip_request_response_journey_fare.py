# coding: utf-8

"""
    Trip Planner

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TripRequestResponseJourneyFare(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tickets': 'list[TripRequestResponseJourneyFareTicket]',
        'zones': 'list[TripRequestResponseJourneyFareZone]'
    }

    attribute_map = {
        'tickets': 'tickets',
        'zones': 'zones'
    }

    def __init__(self, tickets=None, zones=None, _configuration=None):  # noqa: E501
        """TripRequestResponseJourneyFare - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._tickets = None
        self._zones = None
        self.discriminator = None

        if tickets is not None:
            self.tickets = tickets
        if zones is not None:
            self.zones = zones

    @property
    def tickets(self):
        """Gets the tickets of this TripRequestResponseJourneyFare.  # noqa: E501

        Contains a list of the available ticket types for the given trip. given a single type of traveller (e.g. Adult), there may be multiple records in this array that applies to that single traveller. This is because fares are broken down depending on which modes of travel there are.  Please take note of the documentation for `evaluationTicket`, as this value is used to determine the cost of an entire journey.    # noqa: E501

        :return: The tickets of this TripRequestResponseJourneyFare.  # noqa: E501
        :rtype: list[TripRequestResponseJourneyFareTicket]
        """
        return self._tickets

    @tickets.setter
    def tickets(self, tickets):
        """Sets the tickets of this TripRequestResponseJourneyFare.

        Contains a list of the available ticket types for the given trip. given a single type of traveller (e.g. Adult), there may be multiple records in this array that applies to that single traveller. This is because fares are broken down depending on which modes of travel there are.  Please take note of the documentation for `evaluationTicket`, as this value is used to determine the cost of an entire journey.    # noqa: E501

        :param tickets: The tickets of this TripRequestResponseJourneyFare.  # noqa: E501
        :type: list[TripRequestResponseJourneyFareTicket]
        """

        self._tickets = tickets

    @property
    def zones(self):
        """Gets the zones of this TripRequestResponseJourneyFare.  # noqa: E501

        This data is not used at this time.  # noqa: E501

        :return: The zones of this TripRequestResponseJourneyFare.  # noqa: E501
        :rtype: list[TripRequestResponseJourneyFareZone]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this TripRequestResponseJourneyFare.

        This data is not used at this time.  # noqa: E501

        :param zones: The zones of this TripRequestResponseJourneyFare.  # noqa: E501
        :type: list[TripRequestResponseJourneyFareZone]
        """

        self._zones = zones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TripRequestResponseJourneyFare, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TripRequestResponseJourneyFare):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TripRequestResponseJourneyFare):
            return True

        return self.to_dict() != other.to_dict()
