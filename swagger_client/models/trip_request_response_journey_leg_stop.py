# coding: utf-8

"""
    Trip Planner

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TripRequestResponseJourneyLegStop(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'disassembled_name': 'str',
        'type': 'str',
        'coord': 'list[float]',
        'parent': 'ParentLocation',
        'departure_time_estimated': 'str',
        'departure_time_planned': 'str',
        'arrival_time_estimated': 'str',
        'arrival_time_planned': 'str',
        'properties': 'TripRequestResponseJourneyLegStopProperties'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'disassembled_name': 'disassembledName',
        'type': 'type',
        'coord': 'coord',
        'parent': 'parent',
        'departure_time_estimated': 'departureTimeEstimated',
        'departure_time_planned': 'departureTimePlanned',
        'arrival_time_estimated': 'arrivalTimeEstimated',
        'arrival_time_planned': 'arrivalTimePlanned',
        'properties': 'properties'
    }

    def __init__(self, id=None, name=None, disassembled_name=None, type=None, coord=None, parent=None, departure_time_estimated=None, departure_time_planned=None, arrival_time_estimated=None, arrival_time_planned=None, properties=None, _configuration=None):  # noqa: E501
        """TripRequestResponseJourneyLegStop - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._disassembled_name = None
        self._type = None
        self._coord = None
        self._parent = None
        self._departure_time_estimated = None
        self._departure_time_planned = None
        self._arrival_time_estimated = None
        self._arrival_time_planned = None
        self._properties = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if disassembled_name is not None:
            self.disassembled_name = disassembled_name
        if type is not None:
            self.type = type
        if coord is not None:
            self.coord = coord
        if parent is not None:
            self.parent = parent
        if departure_time_estimated is not None:
            self.departure_time_estimated = departure_time_estimated
        if departure_time_planned is not None:
            self.departure_time_planned = departure_time_planned
        if arrival_time_estimated is not None:
            self.arrival_time_estimated = arrival_time_estimated
        if arrival_time_planned is not None:
            self.arrival_time_planned = arrival_time_planned
        if properties is not None:
            self.properties = properties

    @property
    def id(self):
        """Gets the id of this TripRequestResponseJourneyLegStop.  # noqa: E501

        This is a unique ID for the returned location. Certain types of ID can be used for subsequent searches performed with `XML_STOPFINDER_REQUEST`, or can be used as the origin or destination in an `XML_TRIP_REQUEST2` request. The format of a location ID differs greatly, depending on the type of location it is.   # noqa: E501

        :return: The id of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TripRequestResponseJourneyLegStop.

        This is a unique ID for the returned location. Certain types of ID can be used for subsequent searches performed with `XML_STOPFINDER_REQUEST`, or can be used as the origin or destination in an `XML_TRIP_REQUEST2` request. The format of a location ID differs greatly, depending on the type of location it is.   # noqa: E501

        :param id: The id of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TripRequestResponseJourneyLegStop.  # noqa: E501

        This is the long version of the location name, which may include the suburb or other information.   # noqa: E501

        :return: The name of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TripRequestResponseJourneyLegStop.

        This is the long version of the location name, which may include the suburb or other information.   # noqa: E501

        :param name: The name of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def disassembled_name(self):
        """Gets the disassembled_name of this TripRequestResponseJourneyLegStop.  # noqa: E501

        This is the short version of the location name, which does not include the suburb or other information.   # noqa: E501

        :return: The disassembled_name of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :rtype: str
        """
        return self._disassembled_name

    @disassembled_name.setter
    def disassembled_name(self, disassembled_name):
        """Sets the disassembled_name of this TripRequestResponseJourneyLegStop.

        This is the short version of the location name, which does not include the suburb or other information.   # noqa: E501

        :param disassembled_name: The disassembled_name of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :type: str
        """

        self._disassembled_name = disassembled_name

    @property
    def type(self):
        """Gets the type of this TripRequestResponseJourneyLegStop.  # noqa: E501

        This is the type of location being returned. It will typically represent a specific stop or platform.   # noqa: E501

        :return: The type of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TripRequestResponseJourneyLegStop.

        This is the type of location being returned. It will typically represent a specific stop or platform.   # noqa: E501

        :param type: The type of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :type: str
        """
        allowed_values = ["poi", "singlehouse", "stop", "platform", "street", "locality", "location", "unknown"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def coord(self):
        """Gets the coord of this TripRequestResponseJourneyLegStop.  # noqa: E501

        Contains exactly two values: the first value is the latitude, the second value is the longitude.   # noqa: E501

        :return: The coord of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :rtype: list[float]
        """
        return self._coord

    @coord.setter
    def coord(self, coord):
        """Sets the coord of this TripRequestResponseJourneyLegStop.

        Contains exactly two values: the first value is the latitude, the second value is the longitude.   # noqa: E501

        :param coord: The coord of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :type: list[float]
        """

        self._coord = coord

    @property
    def parent(self):
        """Gets the parent of this TripRequestResponseJourneyLegStop.  # noqa: E501

        If available, contains information about this location's parent location. For example, if the stop has a type of `platform`, then this field may contain information about the station in which the platform is located.   # noqa: E501

        :return: The parent of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :rtype: ParentLocation
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this TripRequestResponseJourneyLegStop.

        If available, contains information about this location's parent location. For example, if the stop has a type of `platform`, then this field may contain information about the station in which the platform is located.   # noqa: E501

        :param parent: The parent of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :type: ParentLocation
        """

        self._parent = parent

    @property
    def departure_time_estimated(self):
        """Gets the departure_time_estimated of this TripRequestResponseJourneyLegStop.  # noqa: E501

        A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the estimated departure time. If real-time information is available then this timestamp is the real-time estimate, otherwise it is the same as the value in `departureTimePlanned`.   # noqa: E501

        :return: The departure_time_estimated of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :rtype: str
        """
        return self._departure_time_estimated

    @departure_time_estimated.setter
    def departure_time_estimated(self, departure_time_estimated):
        """Sets the departure_time_estimated of this TripRequestResponseJourneyLegStop.

        A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the estimated departure time. If real-time information is available then this timestamp is the real-time estimate, otherwise it is the same as the value in `departureTimePlanned`.   # noqa: E501

        :param departure_time_estimated: The departure_time_estimated of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :type: str
        """

        self._departure_time_estimated = departure_time_estimated

    @property
    def departure_time_planned(self):
        """Gets the departure_time_planned of this TripRequestResponseJourneyLegStop.  # noqa: E501

        A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the planned departure time. This is the original scheduled time.   # noqa: E501

        :return: The departure_time_planned of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :rtype: str
        """
        return self._departure_time_planned

    @departure_time_planned.setter
    def departure_time_planned(self, departure_time_planned):
        """Sets the departure_time_planned of this TripRequestResponseJourneyLegStop.

        A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the planned departure time. This is the original scheduled time.   # noqa: E501

        :param departure_time_planned: The departure_time_planned of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :type: str
        """

        self._departure_time_planned = departure_time_planned

    @property
    def arrival_time_estimated(self):
        """Gets the arrival_time_estimated of this TripRequestResponseJourneyLegStop.  # noqa: E501

        A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the estimated arrival time. If real-time information is available then this timestamp is the real-time estimate, otherwise it is the same as the value in `arrivalTimePlanned`.   # noqa: E501

        :return: The arrival_time_estimated of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :rtype: str
        """
        return self._arrival_time_estimated

    @arrival_time_estimated.setter
    def arrival_time_estimated(self, arrival_time_estimated):
        """Sets the arrival_time_estimated of this TripRequestResponseJourneyLegStop.

        A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the estimated arrival time. If real-time information is available then this timestamp is the real-time estimate, otherwise it is the same as the value in `arrivalTimePlanned`.   # noqa: E501

        :param arrival_time_estimated: The arrival_time_estimated of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :type: str
        """

        self._arrival_time_estimated = arrival_time_estimated

    @property
    def arrival_time_planned(self):
        """Gets the arrival_time_planned of this TripRequestResponseJourneyLegStop.  # noqa: E501

        A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the planned arrival time. This is the original scheduled time.   # noqa: E501

        :return: The arrival_time_planned of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :rtype: str
        """
        return self._arrival_time_planned

    @arrival_time_planned.setter
    def arrival_time_planned(self, arrival_time_planned):
        """Sets the arrival_time_planned of this TripRequestResponseJourneyLegStop.

        A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the planned arrival time. This is the original scheduled time.   # noqa: E501

        :param arrival_time_planned: The arrival_time_planned of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :type: str
        """

        self._arrival_time_planned = arrival_time_planned

    @property
    def properties(self):
        """Gets the properties of this TripRequestResponseJourneyLegStop.  # noqa: E501


        :return: The properties of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :rtype: TripRequestResponseJourneyLegStopProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TripRequestResponseJourneyLegStop.


        :param properties: The properties of this TripRequestResponseJourneyLegStop.  # noqa: E501
        :type: TripRequestResponseJourneyLegStopProperties
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TripRequestResponseJourneyLegStop, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TripRequestResponseJourneyLegStop):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TripRequestResponseJourneyLegStop):
            return True

        return self.to_dict() != other.to_dict()
