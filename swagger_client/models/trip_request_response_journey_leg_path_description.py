# coding: utf-8

"""
    Trip Planner

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TripRequestResponseJourneyLegPathDescription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'turn_direction': 'str',
        'manoeuvre': 'str',
        'name': 'str',
        'coord': 'list[float]',
        'sky_direction': 'int',
        'duration': 'int',
        'cum_duration': 'int',
        'distance': 'int',
        'distance_up': 'int',
        'distance_down': 'int',
        'cum_distance': 'int',
        'from_coords_index': 'int',
        'to_coords_index': 'int'
    }

    attribute_map = {
        'turn_direction': 'turnDirection',
        'manoeuvre': 'manoeuvre',
        'name': 'name',
        'coord': 'coord',
        'sky_direction': 'skyDirection',
        'duration': 'duration',
        'cum_duration': 'cumDuration',
        'distance': 'distance',
        'distance_up': 'distanceUp',
        'distance_down': 'distanceDown',
        'cum_distance': 'cumDistance',
        'from_coords_index': 'fromCoordsIndex',
        'to_coords_index': 'toCoordsIndex'
    }

    def __init__(self, turn_direction=None, manoeuvre=None, name=None, coord=None, sky_direction=None, duration=None, cum_duration=None, distance=None, distance_up=None, distance_down=None, cum_distance=None, from_coords_index=None, to_coords_index=None, _configuration=None):  # noqa: E501
        """TripRequestResponseJourneyLegPathDescription - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._turn_direction = None
        self._manoeuvre = None
        self._name = None
        self._coord = None
        self._sky_direction = None
        self._duration = None
        self._cum_duration = None
        self._distance = None
        self._distance_up = None
        self._distance_down = None
        self._cum_distance = None
        self._from_coords_index = None
        self._to_coords_index = None
        self.discriminator = None

        if turn_direction is not None:
            self.turn_direction = turn_direction
        if manoeuvre is not None:
            self.manoeuvre = manoeuvre
        if name is not None:
            self.name = name
        if coord is not None:
            self.coord = coord
        if sky_direction is not None:
            self.sky_direction = sky_direction
        if duration is not None:
            self.duration = duration
        if cum_duration is not None:
            self.cum_duration = cum_duration
        if distance is not None:
            self.distance = distance
        if distance_up is not None:
            self.distance_up = distance_up
        if distance_down is not None:
            self.distance_down = distance_down
        if cum_distance is not None:
            self.cum_distance = cum_distance
        if from_coords_index is not None:
            self.from_coords_index = from_coords_index
        if to_coords_index is not None:
            self.to_coords_index = to_coords_index

    @property
    def turn_direction(self):
        """Gets the turn_direction of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501

        Indicates the way you need to turn to execute this step of the path description.   # noqa: E501

        :return: The turn_direction of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :rtype: str
        """
        return self._turn_direction

    @turn_direction.setter
    def turn_direction(self, turn_direction):
        """Sets the turn_direction of this TripRequestResponseJourneyLegPathDescription.

        Indicates the way you need to turn to execute this step of the path description.   # noqa: E501

        :param turn_direction: The turn_direction of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "STRAIGHT", "RIGHT", "LEFT", "SLIGHT_RIGHT", "SLIGHT_LEFT", "SHARP_LEFT", "SHARP_RIGHT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                turn_direction not in allowed_values):
            raise ValueError(
                "Invalid value for `turn_direction` ({0}), must be one of {1}"  # noqa: E501
                .format(turn_direction, allowed_values)
            )

        self._turn_direction = turn_direction

    @property
    def manoeuvre(self):
        """Gets the manoeuvre of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501

        Indicates what you have to do (in addition the turn `turnDirection`) to execute this step of the path description.   # noqa: E501

        :return: The manoeuvre of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :rtype: str
        """
        return self._manoeuvre

    @manoeuvre.setter
    def manoeuvre(self, manoeuvre):
        """Sets the manoeuvre of this TripRequestResponseJourneyLegPathDescription.

        Indicates what you have to do (in addition the turn `turnDirection`) to execute this step of the path description.   # noqa: E501

        :param manoeuvre: The manoeuvre of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :type: str
        """
        allowed_values = ["LEAVE", "KEEP", "TURN", "ENTER", "CONTINUE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                manoeuvre not in allowed_values):
            raise ValueError(
                "Invalid value for `manoeuvre` ({0}), must be one of {1}"  # noqa: E501
                .format(manoeuvre, allowed_values)
            )

        self._manoeuvre = manoeuvre

    @property
    def name(self):
        """Gets the name of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501

        This is a specific description of what to do. In some cases, this information is required in addition to the  other properties provided in this step.    # noqa: E501

        :return: The name of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TripRequestResponseJourneyLegPathDescription.

        This is a specific description of what to do. In some cases, this information is required in addition to the  other properties provided in this step.    # noqa: E501

        :param name: The name of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def coord(self):
        """Gets the coord of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501

        Contains exactly two values: the first value is the latitude, the second value is the longitude. This is the location where the instruction occurs.   # noqa: E501

        :return: The coord of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :rtype: list[float]
        """
        return self._coord

    @coord.setter
    def coord(self, coord):
        """Sets the coord of this TripRequestResponseJourneyLegPathDescription.

        Contains exactly two values: the first value is the latitude, the second value is the longitude. This is the location where the instruction occurs.   # noqa: E501

        :param coord: The coord of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :type: list[float]
        """

        self._coord = coord

    @property
    def sky_direction(self):
        """Gets the sky_direction of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501

        The direction in degrees (0-359) of the skyDirection  # noqa: E501

        :return: The sky_direction of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :rtype: int
        """
        return self._sky_direction

    @sky_direction.setter
    def sky_direction(self, sky_direction):
        """Sets the sky_direction of this TripRequestResponseJourneyLegPathDescription.

        The direction in degrees (0-359) of the skyDirection  # noqa: E501

        :param sky_direction: The sky_direction of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :type: int
        """

        self._sky_direction = sky_direction

    @property
    def duration(self):
        """Gets the duration of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501

        This is the duration of this step in seconds.   # noqa: E501

        :return: The duration of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TripRequestResponseJourneyLegPathDescription.

        This is the duration of this step in seconds.   # noqa: E501

        :param duration: The duration of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def cum_duration(self):
        """Gets the cum_duration of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501

        This is the cumulative duration in seconds at the point of this step.   # noqa: E501

        :return: The cum_duration of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :rtype: int
        """
        return self._cum_duration

    @cum_duration.setter
    def cum_duration(self, cum_duration):
        """Sets the cum_duration of this TripRequestResponseJourneyLegPathDescription.

        This is the cumulative duration in seconds at the point of this step.   # noqa: E501

        :param cum_duration: The cum_duration of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :type: int
        """

        self._cum_duration = cum_duration

    @property
    def distance(self):
        """Gets the distance of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501

        This is the distance travelled in this step in metres.   # noqa: E501

        :return: The distance of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this TripRequestResponseJourneyLegPathDescription.

        This is the distance travelled in this step in metres.   # noqa: E501

        :param distance: The distance of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :type: int
        """

        self._distance = distance

    @property
    def distance_up(self):
        """Gets the distance_up of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501

        This is the distance travelled upward in this step in metres   # noqa: E501

        :return: The distance_up of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :rtype: int
        """
        return self._distance_up

    @distance_up.setter
    def distance_up(self, distance_up):
        """Sets the distance_up of this TripRequestResponseJourneyLegPathDescription.

        This is the distance travelled upward in this step in metres   # noqa: E501

        :param distance_up: The distance_up of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :type: int
        """

        self._distance_up = distance_up

    @property
    def distance_down(self):
        """Gets the distance_down of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501

        This is the distance travelled downward in this step in metres   # noqa: E501

        :return: The distance_down of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :rtype: int
        """
        return self._distance_down

    @distance_down.setter
    def distance_down(self, distance_down):
        """Sets the distance_down of this TripRequestResponseJourneyLegPathDescription.

        This is the distance travelled downward in this step in metres   # noqa: E501

        :param distance_down: The distance_down of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :type: int
        """

        self._distance_down = distance_down

    @property
    def cum_distance(self):
        """Gets the cum_distance of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501

        This is the cumulative distance travelled in metres at the point of this step.  # noqa: E501

        :return: The cum_distance of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :rtype: int
        """
        return self._cum_distance

    @cum_distance.setter
    def cum_distance(self, cum_distance):
        """Sets the cum_distance of this TripRequestResponseJourneyLegPathDescription.

        This is the cumulative distance travelled in metres at the point of this step.  # noqa: E501

        :param cum_distance: The cum_distance of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :type: int
        """

        self._cum_distance = cum_distance

    @property
    def from_coords_index(self):
        """Gets the from_coords_index of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501

        This field enables you to retrieve multiple coordinates from the `coords` property, starting from this index.   # noqa: E501

        :return: The from_coords_index of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :rtype: int
        """
        return self._from_coords_index

    @from_coords_index.setter
    def from_coords_index(self, from_coords_index):
        """Sets the from_coords_index of this TripRequestResponseJourneyLegPathDescription.

        This field enables you to retrieve multiple coordinates from the `coords` property, starting from this index.   # noqa: E501

        :param from_coords_index: The from_coords_index of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :type: int
        """

        self._from_coords_index = from_coords_index

    @property
    def to_coords_index(self):
        """Gets the to_coords_index of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501

        This field enables you to retrieve multiple coordinates from the `coords` property, ending at this index.   # noqa: E501

        :return: The to_coords_index of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :rtype: int
        """
        return self._to_coords_index

    @to_coords_index.setter
    def to_coords_index(self, to_coords_index):
        """Sets the to_coords_index of this TripRequestResponseJourneyLegPathDescription.

        This field enables you to retrieve multiple coordinates from the `coords` property, ending at this index.   # noqa: E501

        :param to_coords_index: The to_coords_index of this TripRequestResponseJourneyLegPathDescription.  # noqa: E501
        :type: int
        """

        self._to_coords_index = to_coords_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TripRequestResponseJourneyLegPathDescription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TripRequestResponseJourneyLegPathDescription):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TripRequestResponseJourneyLegPathDescription):
            return True

        return self.to_dict() != other.to_dict()
