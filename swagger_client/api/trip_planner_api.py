# coding: utf-8

"""
    Trip Planner

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TripPlannerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def tfnsw_addinfo_request(self, output_format, **kwargs):  # noqa: E501
        """Provides capability to display all public transport service status and incident information (as published from the Incident Capture System).  # noqa: E501

        This endpoint returns a list of service alerts or additional information about travelling on the public transport network. This list can be filtered by date, route type, route, operator or stop.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tfnsw_addinfo_request(output_format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str output_format: Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the `outputFormat` value to `rapidJSON` is required to enable JSON output.  (required)
        :param str filter_date_valid: This parameter allows you to filter the returned items that are only valid on the specified date. The format of this field is `DD-MM-YYYY`. For example, 12 September 2016 would be represented by `12-09-2016`. 
        :param int filter_mot_type: This parameter allows you to filter the returned items by the modes of transport they affected. Available modes include:  * `1`: Train * `4`: Light Rail * `5`: Bus * `7`: Coach * `9`: Ferry * `11`: School Bus 
        :param str filter_publication_status: This field can be used so only current alerts are returned, and not historic alerts. 
        :param str itd_l_pxx_sel_stop: This parameter allows you to filter the returned items by its stop ID. For example, to retrieve items that are only relevant to Central Station, you would set this value to `10111010`. You can use the XML_STOPFINDER_REQUEST to determine the ID for a particular stop. 
        :param str itd_l_pxx_sel_line: This parameter allows you to filter the returned items by line number. For example, `020T1`. 
        :param str itd_l_pxx_sel_operator: This parameter allows you to filter the returned items by operator ID.  
        :param str filter_pn_line_dir: This parameter allows you to filter the returned items by specific routes. The route is provided in the format `NNN:LLLLL:D`, (NNN: subnet, LLLLL: Route number, D: direction `H`/`R`). 
        :param str filter_pn_line_sub: This parameter allows you to filter the returned items by specific routes. The route is provided in the format `NNN:LLLLL:E:D`, (NNN: subnet, LLLLL: Route number, D: direction `H`/`R`). 
        :param str version: Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
        :return: AdditionalInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tfnsw_addinfo_request_with_http_info(output_format, **kwargs)  # noqa: E501
        else:
            (data) = self.tfnsw_addinfo_request_with_http_info(output_format, **kwargs)  # noqa: E501
            return data

    def tfnsw_addinfo_request_with_http_info(self, output_format, **kwargs):  # noqa: E501
        """Provides capability to display all public transport service status and incident information (as published from the Incident Capture System).  # noqa: E501

        This endpoint returns a list of service alerts or additional information about travelling on the public transport network. This list can be filtered by date, route type, route, operator or stop.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tfnsw_addinfo_request_with_http_info(output_format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str output_format: Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the `outputFormat` value to `rapidJSON` is required to enable JSON output.  (required)
        :param str filter_date_valid: This parameter allows you to filter the returned items that are only valid on the specified date. The format of this field is `DD-MM-YYYY`. For example, 12 September 2016 would be represented by `12-09-2016`. 
        :param int filter_mot_type: This parameter allows you to filter the returned items by the modes of transport they affected. Available modes include:  * `1`: Train * `4`: Light Rail * `5`: Bus * `7`: Coach * `9`: Ferry * `11`: School Bus 
        :param str filter_publication_status: This field can be used so only current alerts are returned, and not historic alerts. 
        :param str itd_l_pxx_sel_stop: This parameter allows you to filter the returned items by its stop ID. For example, to retrieve items that are only relevant to Central Station, you would set this value to `10111010`. You can use the XML_STOPFINDER_REQUEST to determine the ID for a particular stop. 
        :param str itd_l_pxx_sel_line: This parameter allows you to filter the returned items by line number. For example, `020T1`. 
        :param str itd_l_pxx_sel_operator: This parameter allows you to filter the returned items by operator ID.  
        :param str filter_pn_line_dir: This parameter allows you to filter the returned items by specific routes. The route is provided in the format `NNN:LLLLL:D`, (NNN: subnet, LLLLL: Route number, D: direction `H`/`R`). 
        :param str filter_pn_line_sub: This parameter allows you to filter the returned items by specific routes. The route is provided in the format `NNN:LLLLL:E:D`, (NNN: subnet, LLLLL: Route number, D: direction `H`/`R`). 
        :param str version: Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
        :return: AdditionalInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['output_format', 'filter_date_valid', 'filter_mot_type', 'filter_publication_status', 'itd_l_pxx_sel_stop', 'itd_l_pxx_sel_line', 'itd_l_pxx_sel_operator', 'filter_pn_line_dir', 'filter_pn_line_sub', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tfnsw_addinfo_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'output_format' is set
        if self.api_client.client_side_validation and ('output_format' not in params or
                                                       params['output_format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `output_format` when calling `tfnsw_addinfo_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'output_format' in params:
            query_params.append(('outputFormat', params['output_format']))  # noqa: E501
        if 'filter_date_valid' in params:
            query_params.append(('filterDateValid', params['filter_date_valid']))  # noqa: E501
        if 'filter_mot_type' in params:
            query_params.append(('filterMOTType', params['filter_mot_type']))  # noqa: E501
        if 'filter_publication_status' in params:
            query_params.append(('filterPublicationStatus', params['filter_publication_status']))  # noqa: E501
        if 'itd_l_pxx_sel_stop' in params:
            query_params.append(('itdLPxx_selStop', params['itd_l_pxx_sel_stop']))  # noqa: E501
        if 'itd_l_pxx_sel_line' in params:
            query_params.append(('itdLPxx_selLine', params['itd_l_pxx_sel_line']))  # noqa: E501
        if 'itd_l_pxx_sel_operator' in params:
            query_params.append(('itdLPxx_selOperator', params['itd_l_pxx_sel_operator']))  # noqa: E501
        if 'filter_pn_line_dir' in params:
            query_params.append(('filterPNLineDir', params['filter_pn_line_dir']))  # noqa: E501
        if 'filter_pn_line_sub' in params:
            query_params.append(('filterPNLineSub', params['filter_pn_line_sub']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tfsnwAccessCode']  # noqa: E501

        return self.api_client.call_api(
            '/add_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdditionalInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tfnsw_coord_request(self, output_format, coord, coord_output_format, incl_filter, type_1, radius_1, **kwargs):  # noqa: E501
        """When given a specific geographical location, this API finds public transport stops, stations, wharfs and points of interest around that location.  # noqa: E501

        This endpoint returns places of interest based on the given coordinate and a radius. The types of POIs can be controlled, so if, for example, you only want Opal resellers returned, you can do so.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tfnsw_coord_request(output_format, coord, coord_output_format, incl_filter, type_1, radius_1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str output_format: Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the `outputFormat` value to `rapidJSON` is required to enable JSON output.  (required)
        :param str coord: The coordinate is in the format `LONGITUDE:LATITUDE:EPSG:4326` (Note that longitude is first). For example, the following `coord` value can be used to search around Central Station: `151.206290:-33.884080:EPSG:4326`.  (required)
        :param str coord_output_format: This specifies the format the coordinates are returned in. While other variations are available, the `EPSG:4326` format will return the widely-used format.  (required)
        :param int incl_filter: This enables \"advanced filter mode\" on the server, which is required to enable searching using coordinates.   (required)
        :param str type_1: This specifies the type of items to return.  * `GIS_POINT`: GIS points, including Opal resellers (see `inclDrawClasses_1`) * `BUS_POINT`: Stops/stations * `POI_POINT`: Places of interest  (required)
        :param int radius_1: This indicates the maximum number of metres to search in all directions from the location specified in `coord`. For example, if you use a value of `500` and a `type_1` value of `GIS_POINT`, all Opal resellers within 500 metres will be returned.  (required)
        :param int incl_draw_classes_1: This flag changes the list of POIs that are returned. To return Opal resellers, set this value to `74` and `type_1` to `GIS_POINT`. 
        :param str type_2: This specifies the type of items to return.  * `GIS_POINT`: GIS points, including Opal resellers (see `inclDrawClasses_2`) * `BUS_POINT`: Stops/stations * `POI_POINT`: Places of interest 
        :param int radius_2: This indicates the maximum number of metres to search in all directions from the location specified in `coord`. For example, if you use a value of `500` and a `type_2` value of `GIS_POINT`, all Opal resellers within 500 metres will be returned. 
        :param int incl_draw_classes_2: This flag changes the list of POIs that are returned. To return Opal resellers, set this value to `74` and `type_2` to `GIS_POINT`. 
        :param str type_3: This specifies the type of items to return.  * `GIS_POINT`: GIS points, including Opal resellers (see `inclDrawClasses_3`) * `BUS_POINT`: Stops/stations * `POI_POINT`: Places of interest 
        :param int radius_3: This indicates the maximum number of metres to search in all directions from the location specified in `coord`. For example, if you use a value of `500` and a `type_3` value of `GIS_POINT`, all Opal resellers within 500 metres will be returned. 
        :param int incl_draw_classes_3: This flag changes the list of POIs that are returned. To return Opal resellers, set this value to `74` and `type_3` to `GIS_POINT`. 
        :param str purpose: This field indicates how the returned data is to be used, which in turn impacts whether or not certain locations are returned. 
        :param str version: Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
        :return: CoordRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tfnsw_coord_request_with_http_info(output_format, coord, coord_output_format, incl_filter, type_1, radius_1, **kwargs)  # noqa: E501
        else:
            (data) = self.tfnsw_coord_request_with_http_info(output_format, coord, coord_output_format, incl_filter, type_1, radius_1, **kwargs)  # noqa: E501
            return data

    def tfnsw_coord_request_with_http_info(self, output_format, coord, coord_output_format, incl_filter, type_1, radius_1, **kwargs):  # noqa: E501
        """When given a specific geographical location, this API finds public transport stops, stations, wharfs and points of interest around that location.  # noqa: E501

        This endpoint returns places of interest based on the given coordinate and a radius. The types of POIs can be controlled, so if, for example, you only want Opal resellers returned, you can do so.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tfnsw_coord_request_with_http_info(output_format, coord, coord_output_format, incl_filter, type_1, radius_1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str output_format: Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the `outputFormat` value to `rapidJSON` is required to enable JSON output.  (required)
        :param str coord: The coordinate is in the format `LONGITUDE:LATITUDE:EPSG:4326` (Note that longitude is first). For example, the following `coord` value can be used to search around Central Station: `151.206290:-33.884080:EPSG:4326`.  (required)
        :param str coord_output_format: This specifies the format the coordinates are returned in. While other variations are available, the `EPSG:4326` format will return the widely-used format.  (required)
        :param int incl_filter: This enables \"advanced filter mode\" on the server, which is required to enable searching using coordinates.   (required)
        :param str type_1: This specifies the type of items to return.  * `GIS_POINT`: GIS points, including Opal resellers (see `inclDrawClasses_1`) * `BUS_POINT`: Stops/stations * `POI_POINT`: Places of interest  (required)
        :param int radius_1: This indicates the maximum number of metres to search in all directions from the location specified in `coord`. For example, if you use a value of `500` and a `type_1` value of `GIS_POINT`, all Opal resellers within 500 metres will be returned.  (required)
        :param int incl_draw_classes_1: This flag changes the list of POIs that are returned. To return Opal resellers, set this value to `74` and `type_1` to `GIS_POINT`. 
        :param str type_2: This specifies the type of items to return.  * `GIS_POINT`: GIS points, including Opal resellers (see `inclDrawClasses_2`) * `BUS_POINT`: Stops/stations * `POI_POINT`: Places of interest 
        :param int radius_2: This indicates the maximum number of metres to search in all directions from the location specified in `coord`. For example, if you use a value of `500` and a `type_2` value of `GIS_POINT`, all Opal resellers within 500 metres will be returned. 
        :param int incl_draw_classes_2: This flag changes the list of POIs that are returned. To return Opal resellers, set this value to `74` and `type_2` to `GIS_POINT`. 
        :param str type_3: This specifies the type of items to return.  * `GIS_POINT`: GIS points, including Opal resellers (see `inclDrawClasses_3`) * `BUS_POINT`: Stops/stations * `POI_POINT`: Places of interest 
        :param int radius_3: This indicates the maximum number of metres to search in all directions from the location specified in `coord`. For example, if you use a value of `500` and a `type_3` value of `GIS_POINT`, all Opal resellers within 500 metres will be returned. 
        :param int incl_draw_classes_3: This flag changes the list of POIs that are returned. To return Opal resellers, set this value to `74` and `type_3` to `GIS_POINT`. 
        :param str purpose: This field indicates how the returned data is to be used, which in turn impacts whether or not certain locations are returned. 
        :param str version: Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
        :return: CoordRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['output_format', 'coord', 'coord_output_format', 'incl_filter', 'type_1', 'radius_1', 'incl_draw_classes_1', 'type_2', 'radius_2', 'incl_draw_classes_2', 'type_3', 'radius_3', 'incl_draw_classes_3', 'purpose', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tfnsw_coord_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'output_format' is set
        if self.api_client.client_side_validation and ('output_format' not in params or
                                                       params['output_format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `output_format` when calling `tfnsw_coord_request`")  # noqa: E501
        # verify the required parameter 'coord' is set
        if self.api_client.client_side_validation and ('coord' not in params or
                                                       params['coord'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coord` when calling `tfnsw_coord_request`")  # noqa: E501
        # verify the required parameter 'coord_output_format' is set
        if self.api_client.client_side_validation and ('coord_output_format' not in params or
                                                       params['coord_output_format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coord_output_format` when calling `tfnsw_coord_request`")  # noqa: E501
        # verify the required parameter 'incl_filter' is set
        if self.api_client.client_side_validation and ('incl_filter' not in params or
                                                       params['incl_filter'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `incl_filter` when calling `tfnsw_coord_request`")  # noqa: E501
        # verify the required parameter 'type_1' is set
        if self.api_client.client_side_validation and ('type_1' not in params or
                                                       params['type_1'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type_1` when calling `tfnsw_coord_request`")  # noqa: E501
        # verify the required parameter 'radius_1' is set
        if self.api_client.client_side_validation and ('radius_1' not in params or
                                                       params['radius_1'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `radius_1` when calling `tfnsw_coord_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'output_format' in params:
            query_params.append(('outputFormat', params['output_format']))  # noqa: E501
        if 'coord' in params:
            query_params.append(('coord', params['coord']))  # noqa: E501
        if 'coord_output_format' in params:
            query_params.append(('coordOutputFormat', params['coord_output_format']))  # noqa: E501
        if 'incl_filter' in params:
            query_params.append(('inclFilter', params['incl_filter']))  # noqa: E501
        if 'type_1' in params:
            query_params.append(('type_1', params['type_1']))  # noqa: E501
        if 'radius_1' in params:
            query_params.append(('radius_1', params['radius_1']))  # noqa: E501
        if 'incl_draw_classes_1' in params:
            query_params.append(('inclDrawClasses_1', params['incl_draw_classes_1']))  # noqa: E501
        if 'type_2' in params:
            query_params.append(('type_2', params['type_2']))  # noqa: E501
        if 'radius_2' in params:
            query_params.append(('radius_2', params['radius_2']))  # noqa: E501
        if 'incl_draw_classes_2' in params:
            query_params.append(('inclDrawClasses_2', params['incl_draw_classes_2']))  # noqa: E501
        if 'type_3' in params:
            query_params.append(('type_3', params['type_3']))  # noqa: E501
        if 'radius_3' in params:
            query_params.append(('radius_3', params['radius_3']))  # noqa: E501
        if 'incl_draw_classes_3' in params:
            query_params.append(('inclDrawClasses_3', params['incl_draw_classes_3']))  # noqa: E501
        if 'purpose' in params:
            query_params.append(('purpose', params['purpose']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tfsnwAccessCode']  # noqa: E501

        return self.api_client.call_api(
            '/coord', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoordRequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tfnsw_dm_request(self, output_format, coord_output_format, type_dm, name_dm, dep_arr_macro, itd_date, itd_time, **kwargs):  # noqa: E501
        """Provides capability to provide NSW public transport departure information from a stop, station or wharf including real-time.  # noqa: E501

        This endpoint returns a list of departures/arrivals for a given location based on the date and time specified. This data can be used to display a \"upcoming departures\" board for a stop.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tfnsw_dm_request(output_format, coord_output_format, type_dm, name_dm, dep_arr_macro, itd_date, itd_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str output_format: Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the `outputFormat` value to `rapidJSON` is required to enable JSON output.  (required)
        :param str coord_output_format: This specifies the format the coordinates are returned in. While other variations are available, the `EPSG:4326` format will return the widely-used format. (required)
        :param str type_dm: This specifies the type of results expected based on the search input in `name_dm`. By specifying `any`, locations of all types can be returned. Typically, this API call is used for a specific stop, so `stop` should be used along with a stop ID in `name_dm`.  (required)
        :param str name_dm: This is the search term that will be used to find locations. If the combination of this value and `type_dm` results in more than one location found - or `mode` is not set to `direct`, then a list of stops and no departures will be returned.  (required)
        :param str dep_arr_macro: This value anchors the requested date time to the departure time.  (required)
        :param str itd_date: The reference date used when searching trips, in `YYYYMMDD` format. For instance, 20160901 refers to 1 September 2016. Works in conjunction with the `itdTime` and `depArrMacro` values.  (required)
        :param str itd_time: The reference time used when searching trips, in `HHMM` 24-hour format. For instance, 2215 refers to 10:15 PM. | Works in conjunction with the `itdDate` and `depArrMacro` values.  (required)
        :param str mode: This allows the departure board to display directly without going through the stop verification process. Use this when the stop is known. This relies on the given combination of `type_dm` and `name_dm` returning only a single result, otherwise a list of stops and no departures shall be returned. 
        :param str name_key_dm: Setting this parameter to `$USEPOINT$` enables you to request departures for a specific platform within a station. If this isn't used, then departures for all platforms at the stop specified in `name_dm` are returned. 
        :param str tf_nswdm: Including parameter enables a number of options that result in the stop finder operating in the same way as the Transport for NSW Trip Planner web site, including enabling real-time data.
        :param str version: Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
        :return: DepartureMonitorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tfnsw_dm_request_with_http_info(output_format, coord_output_format, type_dm, name_dm, dep_arr_macro, itd_date, itd_time, **kwargs)  # noqa: E501
        else:
            (data) = self.tfnsw_dm_request_with_http_info(output_format, coord_output_format, type_dm, name_dm, dep_arr_macro, itd_date, itd_time, **kwargs)  # noqa: E501
            return data

    def tfnsw_dm_request_with_http_info(self, output_format, coord_output_format, type_dm, name_dm, dep_arr_macro, itd_date, itd_time, **kwargs):  # noqa: E501
        """Provides capability to provide NSW public transport departure information from a stop, station or wharf including real-time.  # noqa: E501

        This endpoint returns a list of departures/arrivals for a given location based on the date and time specified. This data can be used to display a \"upcoming departures\" board for a stop.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tfnsw_dm_request_with_http_info(output_format, coord_output_format, type_dm, name_dm, dep_arr_macro, itd_date, itd_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str output_format: Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the `outputFormat` value to `rapidJSON` is required to enable JSON output.  (required)
        :param str coord_output_format: This specifies the format the coordinates are returned in. While other variations are available, the `EPSG:4326` format will return the widely-used format. (required)
        :param str type_dm: This specifies the type of results expected based on the search input in `name_dm`. By specifying `any`, locations of all types can be returned. Typically, this API call is used for a specific stop, so `stop` should be used along with a stop ID in `name_dm`.  (required)
        :param str name_dm: This is the search term that will be used to find locations. If the combination of this value and `type_dm` results in more than one location found - or `mode` is not set to `direct`, then a list of stops and no departures will be returned.  (required)
        :param str dep_arr_macro: This value anchors the requested date time to the departure time.  (required)
        :param str itd_date: The reference date used when searching trips, in `YYYYMMDD` format. For instance, 20160901 refers to 1 September 2016. Works in conjunction with the `itdTime` and `depArrMacro` values.  (required)
        :param str itd_time: The reference time used when searching trips, in `HHMM` 24-hour format. For instance, 2215 refers to 10:15 PM. | Works in conjunction with the `itdDate` and `depArrMacro` values.  (required)
        :param str mode: This allows the departure board to display directly without going through the stop verification process. Use this when the stop is known. This relies on the given combination of `type_dm` and `name_dm` returning only a single result, otherwise a list of stops and no departures shall be returned. 
        :param str name_key_dm: Setting this parameter to `$USEPOINT$` enables you to request departures for a specific platform within a station. If this isn't used, then departures for all platforms at the stop specified in `name_dm` are returned. 
        :param str tf_nswdm: Including parameter enables a number of options that result in the stop finder operating in the same way as the Transport for NSW Trip Planner web site, including enabling real-time data.
        :param str version: Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
        :return: DepartureMonitorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['output_format', 'coord_output_format', 'type_dm', 'name_dm', 'dep_arr_macro', 'itd_date', 'itd_time', 'mode', 'name_key_dm', 'tf_nswdm', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tfnsw_dm_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'output_format' is set
        if self.api_client.client_side_validation and ('output_format' not in params or
                                                       params['output_format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `output_format` when calling `tfnsw_dm_request`")  # noqa: E501
        # verify the required parameter 'coord_output_format' is set
        if self.api_client.client_side_validation and ('coord_output_format' not in params or
                                                       params['coord_output_format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coord_output_format` when calling `tfnsw_dm_request`")  # noqa: E501
        # verify the required parameter 'type_dm' is set
        if self.api_client.client_side_validation and ('type_dm' not in params or
                                                       params['type_dm'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type_dm` when calling `tfnsw_dm_request`")  # noqa: E501
        # verify the required parameter 'name_dm' is set
        if self.api_client.client_side_validation and ('name_dm' not in params or
                                                       params['name_dm'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name_dm` when calling `tfnsw_dm_request`")  # noqa: E501
        # verify the required parameter 'dep_arr_macro' is set
        if self.api_client.client_side_validation and ('dep_arr_macro' not in params or
                                                       params['dep_arr_macro'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dep_arr_macro` when calling `tfnsw_dm_request`")  # noqa: E501
        # verify the required parameter 'itd_date' is set
        if self.api_client.client_side_validation and ('itd_date' not in params or
                                                       params['itd_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `itd_date` when calling `tfnsw_dm_request`")  # noqa: E501
        # verify the required parameter 'itd_time' is set
        if self.api_client.client_side_validation and ('itd_time' not in params or
                                                       params['itd_time'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `itd_time` when calling `tfnsw_dm_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'output_format' in params:
            query_params.append(('outputFormat', params['output_format']))  # noqa: E501
        if 'coord_output_format' in params:
            query_params.append(('coordOutputFormat', params['coord_output_format']))  # noqa: E501
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'type_dm' in params:
            query_params.append(('type_dm', params['type_dm']))  # noqa: E501
        if 'name_dm' in params:
            query_params.append(('name_dm', params['name_dm']))  # noqa: E501
        if 'name_key_dm' in params:
            query_params.append(('nameKey_dm', params['name_key_dm']))  # noqa: E501
        if 'dep_arr_macro' in params:
            query_params.append(('depArrMacro', params['dep_arr_macro']))  # noqa: E501
        if 'itd_date' in params:
            query_params.append(('itdDate', params['itd_date']))  # noqa: E501
        if 'itd_time' in params:
            query_params.append(('itdTime', params['itd_time']))  # noqa: E501
        if 'tf_nswdm' in params:
            query_params.append(('TfNSWDM', params['tf_nswdm']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tfsnwAccessCode']  # noqa: E501

        return self.api_client.call_api(
            '/departure_mon', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DepartureMonitorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tfnsw_stopfinder_request(self, output_format, type_sf, name_sf, coord_output_format, **kwargs):  # noqa: E501
        """Provides capability to return all NSW public transport stop, station, wharf, points of interest and known addresses to be used for auto-suggest/auto-complete (to be used with the Trip planner and Departure board APIs).  # noqa: E501

        This endpoint returns info about stops that match the search criteria. Matches can be sorted on `matchQuality` to determine the best matches for the given input.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tfnsw_stopfinder_request(output_format, type_sf, name_sf, coord_output_format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str output_format: Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the `outputFormat` value to `rapidJSON` is required to enable JSON output.  (required)
        :param str type_sf: This specifies the type of results expected in the list of returned stops. By specifying `any`, locations of all types can be returned. If you specifically know that you're searching using a coord, specify `coord`. Likewise, if you're using a stop ID as an input, use `stop` for more accurate results.  (required)
        :param str name_sf: This is the search term that will be used to find locations. To lookup a coordinate, set `type_sf` to `coord`, and use the following format: `LONGITUDE:LATITUDE:EPSG:4326` (Note that longitude is first). For example, `151.206290:-33.884080:EPSG:4326`.  (required)
        :param str coord_output_format: This specifies the format the coordinates are returned in. While other variations are available, the `EPSG:4326` format will return the widely-used format. (required)
        :param int any_max_size_hit_list: The maximum number of results to return in the request.
        :param str tf_nswsf: Including parameter enables a number of options that result in the stop finder operating in the same way as the Transport for NSW Trip Planner web site.
        :param str version: Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
        :return: StopFinderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tfnsw_stopfinder_request_with_http_info(output_format, type_sf, name_sf, coord_output_format, **kwargs)  # noqa: E501
        else:
            (data) = self.tfnsw_stopfinder_request_with_http_info(output_format, type_sf, name_sf, coord_output_format, **kwargs)  # noqa: E501
            return data

    def tfnsw_stopfinder_request_with_http_info(self, output_format, type_sf, name_sf, coord_output_format, **kwargs):  # noqa: E501
        """Provides capability to return all NSW public transport stop, station, wharf, points of interest and known addresses to be used for auto-suggest/auto-complete (to be used with the Trip planner and Departure board APIs).  # noqa: E501

        This endpoint returns info about stops that match the search criteria. Matches can be sorted on `matchQuality` to determine the best matches for the given input.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tfnsw_stopfinder_request_with_http_info(output_format, type_sf, name_sf, coord_output_format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str output_format: Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the `outputFormat` value to `rapidJSON` is required to enable JSON output.  (required)
        :param str type_sf: This specifies the type of results expected in the list of returned stops. By specifying `any`, locations of all types can be returned. If you specifically know that you're searching using a coord, specify `coord`. Likewise, if you're using a stop ID as an input, use `stop` for more accurate results.  (required)
        :param str name_sf: This is the search term that will be used to find locations. To lookup a coordinate, set `type_sf` to `coord`, and use the following format: `LONGITUDE:LATITUDE:EPSG:4326` (Note that longitude is first). For example, `151.206290:-33.884080:EPSG:4326`.  (required)
        :param str coord_output_format: This specifies the format the coordinates are returned in. While other variations are available, the `EPSG:4326` format will return the widely-used format. (required)
        :param int any_max_size_hit_list: The maximum number of results to return in the request.
        :param str tf_nswsf: Including parameter enables a number of options that result in the stop finder operating in the same way as the Transport for NSW Trip Planner web site.
        :param str version: Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
        :return: StopFinderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['output_format', 'type_sf', 'name_sf', 'coord_output_format', 'any_max_size_hit_list', 'tf_nswsf', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tfnsw_stopfinder_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'output_format' is set
        if self.api_client.client_side_validation and ('output_format' not in params or
                                                       params['output_format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `output_format` when calling `tfnsw_stopfinder_request`")  # noqa: E501
        # verify the required parameter 'type_sf' is set
        if self.api_client.client_side_validation and ('type_sf' not in params or
                                                       params['type_sf'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type_sf` when calling `tfnsw_stopfinder_request`")  # noqa: E501
        # verify the required parameter 'name_sf' is set
        if self.api_client.client_side_validation and ('name_sf' not in params or
                                                       params['name_sf'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name_sf` when calling `tfnsw_stopfinder_request`")  # noqa: E501
        # verify the required parameter 'coord_output_format' is set
        if self.api_client.client_side_validation and ('coord_output_format' not in params or
                                                       params['coord_output_format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coord_output_format` when calling `tfnsw_stopfinder_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'output_format' in params:
            query_params.append(('outputFormat', params['output_format']))  # noqa: E501
        if 'type_sf' in params:
            query_params.append(('type_sf', params['type_sf']))  # noqa: E501
        if 'name_sf' in params:
            query_params.append(('name_sf', params['name_sf']))  # noqa: E501
        if 'coord_output_format' in params:
            query_params.append(('coordOutputFormat', params['coord_output_format']))  # noqa: E501
        if 'any_max_size_hit_list' in params:
            query_params.append(('anyMaxSizeHitList', params['any_max_size_hit_list']))  # noqa: E501
        if 'tf_nswsf' in params:
            query_params.append(('TfNSWSF', params['tf_nswsf']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tfsnwAccessCode']  # noqa: E501

        return self.api_client.call_api(
            '/stop_finder', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StopFinderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tfnsw_trip_request2(self, output_format, coord_output_format, dep_arr_macro, itd_date, itd_time, type_origin, name_origin, type_destination, name_destination, **kwargs):  # noqa: E501
        """Provides capability to provide NSW public transport trip plan options, including walking and driving legs, real-time and Opal fare information.  # noqa: E501

        This endpoint is used to find a list of journeys between two locations at the specified date and time. For example, if the user is at the Airport and wants to get to Manly using public transport but isn't sure how exactly, this call will tell them exactly which train, bus, ferry or light rail to catch, and between which stops. It is extremely detailed, and includes fare/ticketing information, as well as the the specific path the vehicle(s) will take.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tfnsw_trip_request2(output_format, coord_output_format, dep_arr_macro, itd_date, itd_time, type_origin, name_origin, type_destination, name_destination, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str output_format: Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the `outputFormat` value to `rapidJSON` is required to enable JSON output.  (required)
        :param str coord_output_format: This specifies the format the coordinates are returned in. While other variations are available, the `EPSG:4326` format will return the widely-used format. (required)
        :param str dep_arr_macro: This value anchors the requested date time. If set to `dep`, then trips *departing after* the specified date/time *at the specified location* are included. If set to `arr`, then trips *arriving before* the specified time *at its destination stop* are included. Works in conjunctions with the `itdDate` and `itdTime` values.  (required)
        :param str itd_date: The reference date used when searching trips, in `YYYYMMDD` format. For instance, `20160901` refers to 1 September 2016. Works in conjunction with the `itdTime` and `depArrMacro` values.  (required)
        :param str itd_time: The reference time used when searching trips, in `HHMM` 24-hour format. For instance, `2215` refers to 10:15 PM. | Works in conjunction with the `itdDate` and `depArrMacro` values.  (required)
        :param str type_origin: This is the type of data specified in the `name_origin` field. The origin indicates the starting point when searching for journeys.  The best way to use the trip planner is to use use `any` for this field then specify a valid location ID in `type_origin`, or to use `coord` in this field and a correctly formatted coordinate in `type_origin`.   (required)
        :param str name_origin: This value should contain a valid location/stop ID (for example, `10101100` indicates Central Station - this can be determined using `XML_STOPFINDER_REQUEST`). It is used to indicate the starting point when searching for journeys. Alternatively, you can use a coordinate in the format `LONGITUDE:LATITUDE:EPSG:4326` (Note that longitude is first).  (required)
        :param str type_destination: This is the type of data specified in the `name_destination` field. The origin indicates the finishing point when searching for journeys. The best way to use the trip planner is to use use `any` for this field then specify a valid location ID in `type_destination`, or to use `coord` in this field and a correctly formatted coordinate in `type_destination`.   (required)
        :param str name_destination: This value should contain a valid location/stop ID (for example, `10101100` indicates Central Station - this can be determined using `XML_STOPFINDER_REQUEST`). It is used to indicate the finishing point when searching for journeys. Alternatively, you can use a coordinate in the format `LONGITUDE:LATITUDE:EPSG:4326` (Note that longitude is first).  (required)
        :param int calc_number_of_trips: This parameter indicates the maximum number of trips to returned. Fewer trips may be returned anyway, depending on the available public transport services. 
        :param str wheelchair: Setting this value to `on` ensures that only wheelchair-accessible options are returned. 
        :param str tf_nswtr: Including parameter enables a number of options that result in the stop finder operating in the same way as the Transport for NSW Trip Planner web site, including enabling real-time data.
        :param str version: Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
        :return: TripRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tfnsw_trip_request2_with_http_info(output_format, coord_output_format, dep_arr_macro, itd_date, itd_time, type_origin, name_origin, type_destination, name_destination, **kwargs)  # noqa: E501
        else:
            (data) = self.tfnsw_trip_request2_with_http_info(output_format, coord_output_format, dep_arr_macro, itd_date, itd_time, type_origin, name_origin, type_destination, name_destination, **kwargs)  # noqa: E501
            return data

    def tfnsw_trip_request2_with_http_info(self, output_format, coord_output_format, dep_arr_macro, itd_date, itd_time, type_origin, name_origin, type_destination, name_destination, **kwargs):  # noqa: E501
        """Provides capability to provide NSW public transport trip plan options, including walking and driving legs, real-time and Opal fare information.  # noqa: E501

        This endpoint is used to find a list of journeys between two locations at the specified date and time. For example, if the user is at the Airport and wants to get to Manly using public transport but isn't sure how exactly, this call will tell them exactly which train, bus, ferry or light rail to catch, and between which stops. It is extremely detailed, and includes fare/ticketing information, as well as the the specific path the vehicle(s) will take.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tfnsw_trip_request2_with_http_info(output_format, coord_output_format, dep_arr_macro, itd_date, itd_time, type_origin, name_origin, type_destination, name_destination, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str output_format: Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the `outputFormat` value to `rapidJSON` is required to enable JSON output.  (required)
        :param str coord_output_format: This specifies the format the coordinates are returned in. While other variations are available, the `EPSG:4326` format will return the widely-used format. (required)
        :param str dep_arr_macro: This value anchors the requested date time. If set to `dep`, then trips *departing after* the specified date/time *at the specified location* are included. If set to `arr`, then trips *arriving before* the specified time *at its destination stop* are included. Works in conjunctions with the `itdDate` and `itdTime` values.  (required)
        :param str itd_date: The reference date used when searching trips, in `YYYYMMDD` format. For instance, `20160901` refers to 1 September 2016. Works in conjunction with the `itdTime` and `depArrMacro` values.  (required)
        :param str itd_time: The reference time used when searching trips, in `HHMM` 24-hour format. For instance, `2215` refers to 10:15 PM. | Works in conjunction with the `itdDate` and `depArrMacro` values.  (required)
        :param str type_origin: This is the type of data specified in the `name_origin` field. The origin indicates the starting point when searching for journeys.  The best way to use the trip planner is to use use `any` for this field then specify a valid location ID in `type_origin`, or to use `coord` in this field and a correctly formatted coordinate in `type_origin`.   (required)
        :param str name_origin: This value should contain a valid location/stop ID (for example, `10101100` indicates Central Station - this can be determined using `XML_STOPFINDER_REQUEST`). It is used to indicate the starting point when searching for journeys. Alternatively, you can use a coordinate in the format `LONGITUDE:LATITUDE:EPSG:4326` (Note that longitude is first).  (required)
        :param str type_destination: This is the type of data specified in the `name_destination` field. The origin indicates the finishing point when searching for journeys. The best way to use the trip planner is to use use `any` for this field then specify a valid location ID in `type_destination`, or to use `coord` in this field and a correctly formatted coordinate in `type_destination`.   (required)
        :param str name_destination: This value should contain a valid location/stop ID (for example, `10101100` indicates Central Station - this can be determined using `XML_STOPFINDER_REQUEST`). It is used to indicate the finishing point when searching for journeys. Alternatively, you can use a coordinate in the format `LONGITUDE:LATITUDE:EPSG:4326` (Note that longitude is first).  (required)
        :param int calc_number_of_trips: This parameter indicates the maximum number of trips to returned. Fewer trips may be returned anyway, depending on the available public transport services. 
        :param str wheelchair: Setting this value to `on` ensures that only wheelchair-accessible options are returned. 
        :param str tf_nswtr: Including parameter enables a number of options that result in the stop finder operating in the same way as the Transport for NSW Trip Planner web site, including enabling real-time data.
        :param str version: Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
        :return: TripRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['output_format', 'coord_output_format', 'dep_arr_macro', 'itd_date', 'itd_time', 'type_origin', 'name_origin', 'type_destination', 'name_destination', 'calc_number_of_trips', 'wheelchair', 'tf_nswtr', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tfnsw_trip_request2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'output_format' is set
        if self.api_client.client_side_validation and ('output_format' not in params or
                                                       params['output_format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `output_format` when calling `tfnsw_trip_request2`")  # noqa: E501
        # verify the required parameter 'coord_output_format' is set
        if self.api_client.client_side_validation and ('coord_output_format' not in params or
                                                       params['coord_output_format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coord_output_format` when calling `tfnsw_trip_request2`")  # noqa: E501
        # verify the required parameter 'dep_arr_macro' is set
        if self.api_client.client_side_validation and ('dep_arr_macro' not in params or
                                                       params['dep_arr_macro'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dep_arr_macro` when calling `tfnsw_trip_request2`")  # noqa: E501
        # verify the required parameter 'itd_date' is set
        if self.api_client.client_side_validation and ('itd_date' not in params or
                                                       params['itd_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `itd_date` when calling `tfnsw_trip_request2`")  # noqa: E501
        # verify the required parameter 'itd_time' is set
        if self.api_client.client_side_validation and ('itd_time' not in params or
                                                       params['itd_time'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `itd_time` when calling `tfnsw_trip_request2`")  # noqa: E501
        # verify the required parameter 'type_origin' is set
        if self.api_client.client_side_validation and ('type_origin' not in params or
                                                       params['type_origin'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type_origin` when calling `tfnsw_trip_request2`")  # noqa: E501
        # verify the required parameter 'name_origin' is set
        if self.api_client.client_side_validation and ('name_origin' not in params or
                                                       params['name_origin'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name_origin` when calling `tfnsw_trip_request2`")  # noqa: E501
        # verify the required parameter 'type_destination' is set
        if self.api_client.client_side_validation and ('type_destination' not in params or
                                                       params['type_destination'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type_destination` when calling `tfnsw_trip_request2`")  # noqa: E501
        # verify the required parameter 'name_destination' is set
        if self.api_client.client_side_validation and ('name_destination' not in params or
                                                       params['name_destination'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name_destination` when calling `tfnsw_trip_request2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'output_format' in params:
            query_params.append(('outputFormat', params['output_format']))  # noqa: E501
        if 'coord_output_format' in params:
            query_params.append(('coordOutputFormat', params['coord_output_format']))  # noqa: E501
        if 'dep_arr_macro' in params:
            query_params.append(('depArrMacro', params['dep_arr_macro']))  # noqa: E501
        if 'itd_date' in params:
            query_params.append(('itdDate', params['itd_date']))  # noqa: E501
        if 'itd_time' in params:
            query_params.append(('itdTime', params['itd_time']))  # noqa: E501
        if 'type_origin' in params:
            query_params.append(('type_origin', params['type_origin']))  # noqa: E501
        if 'name_origin' in params:
            query_params.append(('name_origin', params['name_origin']))  # noqa: E501
        if 'type_destination' in params:
            query_params.append(('type_destination', params['type_destination']))  # noqa: E501
        if 'name_destination' in params:
            query_params.append(('name_destination', params['name_destination']))  # noqa: E501
        if 'calc_number_of_trips' in params:
            query_params.append(('calcNumberOfTrips', params['calc_number_of_trips']))  # noqa: E501
        if 'wheelchair' in params:
            query_params.append(('wheelchair', params['wheelchair']))  # noqa: E501
        if 'tf_nswtr' in params:
            query_params.append(('TfNSWTR', params['tf_nswtr']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tfsnwAccessCode']  # noqa: E501

        return self.api_client.call_api(
            '/trip', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TripRequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
